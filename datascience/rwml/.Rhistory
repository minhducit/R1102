install.packages();
install.packages()
legend('topleft', c("Join with dense column","Join with sorted column"), cex=1.5, col=c("red","blue"), pch=21:22, lty=1:2, lwd=4);
source('~/R_Prac/dense_vs_sorted.R')
legend('topleft', c("Join with dense column","Join with sorted column"), cex=1.5, col=c("red","blue"), pch=21:22, lty=1:2, lwd=4);
getwd()
A
A <- matrix(c(1,2,3,4,5,6,7,8),nrow = 4, ncol = 2)
A
getwd()
A <- matrix(c(1,2,3,4,5,6,7,8),nrow = 4, ncol = 2)
A
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(A)
View(A)
plot(A[0], A[1], type="o", ylab="Processing time (ms)", xlab="Sampling (percentage)", ylim=c(0, 140), cex.lab=2, cex.axis = 2, col="blue", lwd=4, lty=1, pch=22)
source('~/R_Prac/matrixprint.R', echo=TRUE)
install.packages("hexbin")
source('~/R_Prac/matrixprint.R', echo=TRUE)
getwd()
Rscript
R
source('~/R_Prac/dense_vs_sorted.R', echo=TRUE)
#Sample|MedianDense|MinDense|MedianSorted|MinSorted
args <- commandArgs(trailingOnly = TRUE)
df <- read.csv("C:\PMD\bitbucket\iswc2016\figures\optTime_vs_numPatterns_MonetDB.dat",sep="|",head=T)
args <- commandArgs(trailingOnly = TRUE)
df <- read.csv("C:\PMD\bitbucket\iswc2016\figures\optTime_vs_numPatterns_MonetDB.dat",sep="|",head=T)
df <- read.csv("C:/PMD/bitbucket/iswc2016/figures/optTime_vs_numPatterns_MonetDB.dat",sep="|",head=T)
#mydf <- data.frame(meddense=df$MedianDense, medsorted=df$MedianSorted, row.names=df$Sample)
sample <- cbind(df$Sample)
#outfile<-paste(args[2],"",sep = "")
#pdf(file=outfile)
par(mar=c(5.1,4.5,6.1,2.1))
plot(df$Sample, df$MinSorted * 0.001, type="o", ylab="Processing time (ms)", xlab="Sampling (percentage)", ylim=c(0, 140), cex.lab=2, cex.axis = 2, col="blue", lwd=4, lty=1, pch=22)
plot(df$NumPattern, df$Triple-based, type="o", ylab="Processing time (ms)", xlab="Sampling (percentage)", ylim=c(0, 140), cex.lab=2, cex.axis = 2, col="blue", lwd=4, lty=1, pch=22)
plot(df$NumPattern, df$Triple-based, type="o", ylab="Processing time (ms)", xlab="Sampling (percentage)", ylim=c(0, 140), cex.lab=2, cex.axis = 2, col="blue", lwd=4, lty=1, pch=22)
#Sample|MedianDense|MinDense|MedianSorted|MinSorted
args <- commandArgs(trailingOnly = TRUE)
#NumPattern|Triple-based|Relational-based
args <- commandArgs(trailingOnly = TRUE)
df <- read.csv("C:/PMD/bitbucket/iswc2016/figures/optTime_vs_numPatterns_MonetDB.dat",sep="|",head=T)
#mydf <- data.frame(meddense=df$MedianDense, medsorted=df$MedianSorted, row.names=df$Sample)
sample <- cbind(df$Sample)
#outfile<-paste(args[2],"",sep = "")
df <- read.csv("C:/PMD/bitbucket/iswc2016/figures/optTime_vs_numPatterns_MonetDB.dat",sep="|",head=T)
#outfile<-paste(args[2],"",sep = "")
#pdf(file=outfile)
par(mar=c(5.1,4.5,6.1,2.1))
plot(df$NumPattern, df$Triple-based, type="o", ylab="Processing time (ms)", xlab="Sampling (percentage)", ylim=c(0, 140), cex.lab=2, cex.axis = 2, col="blue", lwd=4, lty=1, pch=22)
#NumPattern|Triple_based|Relational_based
args <- commandArgs(trailingOnly = TRUE)
source('~/R_Prac/optTime_vs_numPatterns.R', echo=TRUE)
source('~/R_Prac/optTime_vs_numPatterns.R', echo=TRUE)
source('~/R_Prac/optTime_vs_numPatterns.R', echo=TRUE)
source('~/R_Prac/optTime_vs_numPatterns.R', echo=TRUE)
source('~/R_Prac/optTime_vs_numPatterns.R', echo=TRUE)
source('~/R_Prac/optTime_vs_numPatterns.R', echo=TRUE)
source('C:/PMD/bitbucket/iswc2016/figures/optTime_vs_numPatterns.R', echo=TRUE)
source('C:/PMD/bitbucket/iswc2016/figures/optTime_vs_numPatterns.R', echo=TRUE)
source('C:/PMD/bitbucket/iswc2016/figures/optTime_vs_numPatterns.R', echo=TRUE)
source('C:/PMD/bitbucket/iswc2016/figures/optTime_vs_numPatterns.R', echo=TRUE)
plot_colors <- c("blue","black", "green", "orange", "pink") text <-
plot_colors <- c("blue","black", "green", "orange", "pink")
text <-c("Fabricated Metal", "Iron and Steel", "Paper", "Beverages",
"Tobacco")
plot_colors <- c("blue","black", "green", "orange", "pink")
text <-c("Fabricated Metal", "Iron and Steel", "Paper", "Beverages","Tobacco")
plot.new()
par(xpd=TRUE)
legend("center",legend = text, text.width = max(sapply(text, strwidth)), col=plot_colors, lwd=5, cex=1, horiz = TRUE)
par(xpd=FALSE)
par(xpd=FALSE)
par(xpd=FALSE)
plot_colors <- c("blue","black", "green", "orange", "pink")
text <-c("Fabricated Metal", "Iron and Steel", "Paper", "Beverages","Tobacco")
#outfile<-paste(args[2],"",sep = "")
#pdf(file=outfile)
plot.new()
#par(xpd=TRUE)
legend("center",legend = text, text.width = max(sapply(text, strwidth)), col=plot_colors, lwd=5, cex=1, horiz = TRUE)
#par(xpd=FALSE)
plot_colors <- c("red","blue", "green")
text <-c("MonetDB-emer", "MonetDB-triple", "MonetDB-SQL")
#Set margin
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
#barplot(0,0, axes=FALSE, col=plot_colors, legend=text, args.legend = list(cex=2, horiz = TRUE))
barplot(0,0, axes=FALSE)
legend(x="center",legend=text, cex=1, xpd = TRUE, horiz = TRUE, fill=plot_colors, text.width = max(sapply(text, strwidth)))
help(legend)
install.packages('caret')
install.packages('caret')
a<-seq(3.2, 28, by=2)
print a
print(a)
a<-seq(3.2, 30, by=4.4)
print(a)
library(help = "datasets")
cars{dataset}
cars{datasets}
help(solve)
??solve
s<-seq(-5,10, by=.2)
s
s<-seq(-5,10, by=1)
s
s<-seq(-15,10, by=1)
s
plot(s)
csv',sep =",")
>

C:\Users\dpham\Downloads
df <- read.csv('C:\Users\dpham\Downloads\cars.csv',sep=",")
df <- read.csv('C:/Users/dpham/Downloads/cars.csv',sep=",")
df
plot(df)
iris
cars
q()
library(tidyjson)
install.packages(tidyjson)
library(tidyjson)
source('C:/PMD/R/R1102/datascience/pm/loadjs.R', echo=TRUE)
source('C:/PMD/R/R1102/datascience/pm/loadjs.R', echo=TRUE)
source('C:/PMD/R/R1102/datascience/pm/loadjs.R', echo=TRUE)
help(gather_array)
help(tidyjson)
??tidyjson
library(dplyr)
commits
json <- '[{"name": "bob", "age": 32}, {"name": "susan", "age": 54}]'
json %>%
as.tbl_json %>%
gather_array %>%
spread_value(    # Spread (widen) values to widen the data.frame
user.name = jstring("name"),  # Extract the "name" object as a character column "user.name"
user.age = jnumber("age")     # Extract the "age" object as a numeric column "user.age"
)
source('C:/PMD/R/R1102/datascience/pm/loadjs.R', echo=TRUE)
version
version
source('C:/PMD/R/R1102/datascience/pm/loadjs.R', echo=TRUE)
source('C:/PMD/R/R_downloadpkgs/package_download.R', echo=TRUE)
getPackages <- function(packs){
packages <- unlist(
tools::package_dependencies(packs, available.packages(),
which=c("Depends", "Imports", "LinkingTo"), recursive=TRUE)
)
packages <- union(packs, packages)
packages
}
packages <- getPackages(c("dplyr", "MASS"))
download.packages(packages, destdir="C:/PMD/R/R_downloadpkgs", type="source")
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(vcd)
x <- c(1,2,4,5)
plot(x)
x <- data.frame(c(1,2,4,5), c("a","a","b","c")
plot(x)
x <- data.frame(c(1,2,4,5), c("a","a","b","c"))
plot(x)
boxplot(x)
boxplot(x, y)
x <- data.frame(c(1,2,4,5), c("a","a","b","c"))
boxplot(x, y)
library(vcd)
library(vcd)
install.packages("vcd")
library(vcd)
mosaic(
~ Sex + Survived,
data = titanic,
main = "Mosaic plot for Titanic data: Gender vs. survival",
shade = TRUE,
split_vertical = TRUE,
labeling_args = list(
set_varnames = c(
Survived = "Survived?")))
setwd("C:/PMD/R/R1102/datascience/rwml/")
titanic <- read.csv("data/titanic.csv",
colClasses = c(
Survived = "factor",
Name = "character",
Ticket = "character",
Cabin = "character"))
str(titanic)
titanic$Survived <- revalue(titanic$Survived, c("0"="no", "1"="yes"))
head(titanic$Cabin)
titanicNew <- titanic %>%
separate(Cabin, into = "firstCabin", sep = " ", extra = "drop", remove = FALSE) %>%
separate(firstCabin, into = c("cabinChar", "cabinNum"), sep = 1) %>%
rowwise() %>%
mutate(numCabins = length(unlist(strsplit(Cabin, " "))))
str(titanicNew)
normalizeFeature = function(data, fMin = -1.0, fMax = 1.0){
dMin = min(na.omit(data))
dMax = max(na.omit(data))
factor = (fMax -fMin) / (dMax - dMin)
normalized = fMin + (data - dMin)*factor
normalized
}
titanic$AgeNormalized <- normalizeFeature(titanic$Age)
#ggplot(data=titanic, aes(AgeNormalized)) + geom_histogram()
ggplot(data=titanic, aes(AgeNormalized)) + geom_histogram()
mosaic(
~ Sex + Survived,
data = titanic,
main = "Mosaic plot for Titanic data: Gender vs. survival",
shade = TRUE,
split_vertical = TRUE,
labeling_args = list(
set_varnames = c(
Survived = "Survived?")))
